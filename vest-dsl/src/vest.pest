//! Vest: a parser and serializer generator for binary data formats

grammar = _{ SOI ~ definition+ ~ EOI }

definition = { combinator_defn | const_combinator_defn | endianess_defn }

combinator_defn = { secret? ~ var_id ~ param_defn_list? ~ "=" ~ combinator }
param_defn_list = { "(" ~ param_defn ~ ("," ~ param_defn)* ~ ")" }
param_defn      = { stream_id | depend_id ~ ":" ~ combinator_inner }

const_combinator_defn = { constant ~ const_id ~ ":" ~ const_combinator }

endianess_defn = { ("!LITTLE_ENDIAN" | "!BIG_ENDIAN") }

combinator       = { ("(" ~ combinator_inner ~ ")" | combinator_inner) ~ (">>=" ~ combinator)? }
combinator_inner = {
    constraint_int_combinator
  | struct_combinator
  | wrap_combinator
  | enum_combinator
  | choice_combinator
  | sepby_combinator
  | vec_combinator
  | tail_combinator
  | array_combinator
  | apply_combinator
  | option_combinator
  | combinator_invocation
}

/// an integer combinator with an optional set of constraints
constraint_int_combinator =  { int_combinator ~ ("|" ~ int_constraint)? }
int_combinator            = ${ (unsigned | signed) ~ decimal }
int_constraint            =  { constraint_elem | constraint_elem_set | "!" ~ int_constraint }
constraint_elem_set       =  { "{" ~ constraint_elem ~ ("," ~ constraint_elem)* ~ "}" }
constraint_elem           =  { const_int_range | const_int }
const_int_range           =  { const_int? ~ ".." ~ const_int? }
const_int                 = ${ hex | decimal | ascii }

/// sequence of `combinator` with semantic labels
struct_combinator = { "{" ~ (field ~ ",")* ~ "}" }
field             = {
    preser_combinator
  | stream_transform
  | constant ~ var_id ~ ":" ~ const_combinator
  | depend_id ~ ":" ~ combinator
  | var_id ~ ":" ~ combinator
}
preser_combinator = { preser ~ var_id ~ ":" ~ decimal }
stream_transform  = { (let ~ stream_ids ~ "=")? ~ var_id ~ param_list }
stream_ids        = { stream_id ~ ("," ~ stream_id)* }

/// wrap a `combinator` with any number of `const_combinator`
wrap_combinator = { wrap ~ "(" ~ wrap_prior ~ combinator ~ wrap_post ~ ")" }
wrap_prior      = { (const_combinator ~ ",")* }
wrap_post       = { ("," ~ const_combinator)* }

/// enum `combinator` for primitive types
// enum_combinator = { enum ~ "{" ~ enum_field+ ~ non_exhaustive_marker? ~ "}" }
enum_combinator       =  { enum ~ "{" ~ (non_exhaustive_enum | exhaustive_enum) ~ "}" }
exhaustive_enum       =  { enum_field+ }
non_exhaustive_enum   =  { enum_field+ ~ non_exhaustive_marker }
enum_field            =  { variant_id ~ "=" ~ const_int ~ "," }
non_exhaustive_marker = _{ "..." }

/// ordered choice `combinator`
choice_combinator = { choose ~ ("(" ~ depend_id ~ ")")? ~ "{" ~ choice+ ~ "}" }
choice            = { (variant_id | const_int | const_array) ~ "=>"? ~ combinator ~ "," }

/// vec of `combinator` (`Vec` for zero or more and `Vec1` for one or more)
vec_combinator = { (vec1 | vec) ~ "<" ~ combinator ~ ">" }

/// like `vec_combinator` but with a separator
sepby_combinator = { vec_combinator ~ "|" ~ const_combinator }

/// fixed size array of `combinator` (specified by a `const_int` or `dependency_id`)
array_combinator = { "[" ~ combinator ~ ";" ~ (const_int | depend_id) ~ "]" }

/// an optional `combinator`
option_combinator = { option ~ "<" ~ combinator ~ ">" }

/// tail combinator that consumes the rest of the input
tail_combinator = { tail }

/// apply a `stream_id` to a `combinator`
apply_combinator = { apply ~ "(" ~ stream_id ~ "," ~ combinator ~ ")" }

/// invoke a `combinator` with optional `param_list`
combinator_invocation = { var_id ~ param_list? }
param_list            = { "(" ~ param ~ ("," ~ param)* ~ ")" }
param                 = { stream_id | depend_id }

const_combinator = {
    vec ~ "<" ~ const_combinator ~ ">"
  | const_array_combinator
  | const_int_combinator
  | const_id
  | const_struct_combinator
  | const_choice_combinator
}

const_array_combinator =  { "[" ~ int_combinator ~ ";" ~ const_int ~ "]" ~ "=" ~ const_array }
const_array            =  { const_char_array | const_int_array }
const_char_array       = ${ "\"" ~ (!"\"" ~ char)* ~ "\"" }
const_int_array        =  { int_array_expr | repeat_int_array_expr }
int_array_expr         =  { "[" ~ const_int ~ ("," ~ const_int)* ~ "]" }
repeat_int_array_expr  =  { "[" ~ const_int ~ ";" ~ const_int ~ "]" }

const_int_combinator = { int_combinator ~ "=" ~ const_int }

const_struct_combinator =  { "{" ~ const_fields ~ "}" }
const_fields            = _{ (const_combinator ~ ",")+ }

const_choice_combinator = { choose ~ "{" ~ const_choice* ~ "}" }
const_choice            = { variant_id ~ "(" ~ const_combinator ~ ")" ~ "," }

/// decimal literal, e.g. 15213
decimal = @{ ASCII_DIGIT+ }

/// hexidecimal literal, e.g. 0x3F, 0x5a
hex = @{ "0x" ~ ASCII_HEX_DIGIT+ }

/// ascii literal (a subset of unicode from 0 to 255), e.g '\x00', '\x1b', 'a'
ascii = ${ "'" ~ ("\\x" ~ ASCII_HEX_DIGIT{2} | char) ~ "'" }
char  =  { '\u{00}'..'\u{FF}' }

var_id     = @{ ASCII_ALPHA_LOWER ~ (ASCII_DIGIT | ASCII_ALPHA_LOWER | "_")* }
const_id   = @{ ASCII_ALPHA_UPPER ~ (ASCII_DIGIT | ASCII_ALPHA_UPPER | "_")* }
variant_id = @{ (ASCII_ALPHA_UPPER ~ (ASCII_DIGIT | ASCII_ALPHA | "_")*) | "_" }
stream_id  = @{ "$" ~ ASCII_ALPHA_LOWER ~ (ASCII_DIGIT | ASCII_ALPHA_LOWER | "_")* }
depend_id  = @{ "@" ~ ASCII_ALPHA_LOWER ~ (ASCII_DIGIT | ASCII_ALPHA_LOWER | "_")* }

// keywords

secret   =  { "secret" }
wrap     = _{ "wrap" }
preser   = _{ "preser" }
enum     = _{ "enum" }
choose   = _{ "choose" }
apply    = _{ "apply" }
let      = _{ "let" }
constant =  { "const" }
signed   =  { "i" }
unsigned =  { "u" }
option   = _{ "Option" }
vec      =  { "Vec" }
vec1     =  { "Vec1" }
tail     =  { "Tail" }

WHITESPACE = _{ " " | "\t" | "\r" | "\n" | "\r\n" }

COMMENT = _{ "//" ~ (!"\n" ~ ANY)* }
